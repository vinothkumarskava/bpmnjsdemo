'use strict';

var actionEntryFactory = require('bpmn-js-properties-panel/lib/provider/bpmn/parts/implementation/Action'),
    selectEntryFactory = require('bpmn-js-properties-panel/lib/provider/bpmn/parts/implementation/Dropdown'),
    labelEntryFactory = require('bpmn-js-properties-panel/lib/provider/bpmn/parts/implementation/Label'),
    checkboxEntryFactory = require('bpmn-js-properties-panel/lib/provider/bpmn/parts/implementation/CheckBoxEventDefinition'),
    is = require('bpmn-js/lib/util/ModelUtil').is,
    domQuery = require('min-dom').query,
    domQueryAll = require('min-dom').queryAll,
    getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject;
var cmdHelper = require('../../../helper/CmdHelper');
const SUITABILITY_PROCESS_PRICE = "PROCESS_PRICE",
      SUITABILITY_FETCH_PRICE = "FETCH_PRICE",
      SUITABILITY_SHOPPING_FLOW = "SHOPPING_FLOW";

module.exports = function(group, element, bpmnFactory, canvas, translate, additionalParams) {
  var bo = getBusinessObject(element);

  if (is(element, 'bpmn:Task') && bo.customElementName == SUITABILITY_PROCESS_PRICE) {
    var options = { id:"ppAdjustment", label: translate('Adjustments')};
    group.entries = group.entries.concat(labelEntryFactory(element, options, translate));

    options = { id:"ppAdjustment_operation", modelProperty: 'ppAdjustmentOperation', label: translate('Operation'), inputArr: additionalParams.config.PPAdjustmentOperation};
    group.entries = group.entries.concat(selectEntryFactory(element, options, translate));

    options = { id: "ppAdjustment_value", modelProperty: 'ppAdjustmentValue', label: translate('Value (Percentage)') };
    group.entries = group.entries.concat(actionEntryFactory(element, options, translate));

    options = { id:"ppRoundoff", label: translate('Round-off')};
    group.entries = group.entries.concat(labelEntryFactory(element, options, translate));

    options = { id:"ppRoundoff_operation", modelProperty: 'ppRoundoffOperation', label: translate('Operation'), inputArr: additionalParams.config.PPRoundoffOperation};
    group.entries = group.entries.concat(selectEntryFactory(element, options, translate));

    // options = { id:"ppRoundoff_type", modelProperty: 'type', label: translate('Type'), inputArr: additionalParams.config.PPRoundoffType};
    // group.entries = group.entries.concat(selectEntryFactory(element, options, translate));

    options = { id: "ppRoundoff_value", modelProperty: 'ppRoundoffValue', label: translate('Type'), description: "Enter the rounding pattern here. Example: *.00, *.49, *.99, *.29"};
    group.entries = group.entries.concat(actionEntryFactory(element, options, translate));
  }
};
