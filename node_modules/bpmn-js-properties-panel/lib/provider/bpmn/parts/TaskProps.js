'use strict';

var nameEntryFactory = require('bpmn-js-properties-panel/lib/provider/bpmn/parts/implementation/Action'),
    selectEntryFactory = require('bpmn-js-properties-panel/lib/provider/bpmn/parts/implementation/Dropdown'),
    labelEntryFactory = require('bpmn-js-properties-panel/lib/provider/bpmn/parts/implementation/Label'),
    is = require('bpmn-js/lib/util/ModelUtil').is,
    getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject,
    processPrice = require('./implementation/ProcessPriceEventDefinition'),
    dropdownProps = require('./DropdownProps');
var cmdHelper = require('../../../helper/CmdHelper');
const SUITABILITY_PROCESS_PRICE = "PROCESS_PRICE",
      SUITABILITY_FETCH_PRICE = "FETCH_PRICE",
      SUITABILITY_SHOPPING_FLOW = "SHOPPING_FLOW";

module.exports = function(group, element, bpmnFactory, canvas, translate, additionalParams) {
  var bo = getBusinessObject(element);
  if (is(element, 'bpmn:Task') && (bo.customElementName == SUITABILITY_SHOPPING_FLOW)) {
    var options = { modelProperty: 'action', label: translate('Action') };
    group.entries = group.entries.concat(nameEntryFactory(element, options, translate));
  }

  if (is(element, 'bpmn:Task') && bo.customElementName == SUITABILITY_FETCH_PRICE) {

    function ensureNotNull(prop) {
      if (!prop) {
        throw new Error(prop + ' must be set.');
      }
      return prop;
    }
  
    function customSet(element, values) {
      var canvEl = canvas.getRootElement();
      //additionalParams.customAlert();
      var res = {},
          prop = ensureNotNull('pricelist');
      if (values[prop] !== '') {
        res[prop] = values[prop];
      } else {
        res[prop] = undefined;
      }
      return cmdHelper.updateProperties(element, res);
    };

    var options = { modelProperty: 'pricelist', label: translate('Price List ID'), set : customSet};
    group.entries = group.entries.concat(nameEntryFactory(element, options, translate));
  }

  if (is(element, 'bpmn:Task') && bo.customElementName == SUITABILITY_PROCESS_PRICE) {
    var options = { id:"ppAdjustment", label: translate('Adjustments')};
    group.entries = group.entries.concat(labelEntryFactory(element, options, translate));

    var options = { id:"ppAdjustment_operation", modelProperty: 'adjustmentOperation', label: translate('Operation'), inputArr: additionalParams.config.PPAdjustmentOperation};
    group.entries = group.entries.concat(selectEntryFactory(element, options, translate));

    var options = { id:"ppAdjustment_value", modelProperty: 'value', label: translate('Value (Percentage)') };
    group.entries = group.entries.concat(nameEntryFactory(element, options, translate));

    var options = { id:"ppRoundoff", label: translate('Round-off')};
    group.entries = group.entries.concat(labelEntryFactory(element, options, translate));

    var options = { id:"ppRoundoff_operation", modelProperty: 'roundoffOperation', label: translate('Operation'), inputArr: additionalParams.config.PPRoundoffOperation};
    group.entries = group.entries.concat(selectEntryFactory(element, options, translate));

    var options = { id:"ppRoundoff_type", modelProperty: 'type', label: translate('Type'), inputArr: additionalParams.config.PPRoundoffType};
    group.entries = group.entries.concat(selectEntryFactory(element, options, translate));
  }

  if (is(element, 'bpmn:SequenceFlow')) {
    function getTargetRef(){
      if(bo.targetRef && bo.targetRef.customElementName) {
        return bo.targetRef.customElementName;
      }
      return null;
    }

    function getSourceRef(){
      if(bo.sourceRef && bo.sourceRef.$type == "bpmn:ExclusiveGateway") {
        return bo.sourceRef;
      }
      return null;
    }

    let sourceRef = getSourceRef(),
        targetRef = getTargetRef();
    if(sourceRef && targetRef) {
      var keyOptions = {},
          operatorOptions = {},
          valueOptions = {};
      if(targetRef == SUITABILITY_PROCESS_PRICE || 
          (sourceRef.incoming && sourceRef.incoming[0].sourceRef.customElementName && 
            sourceRef.incoming[0].sourceRef.customElementName == SUITABILITY_FETCH_PRICE) ) {
        keyOptions = { id:"ppConditionKey", modelProperty: 'ppConditionKey', label: translate('Key'), inputArr: additionalParams.config.condPPKey};
        operatorOptions = { id:"ppConditionOperator", modelProperty: 'ppConditionOperator', label: translate('Operator'), inputArr: additionalParams.config.condOperator};
        valueOptions = { id:"ppConditionValue", modelProperty: 'ppConditionValue', label: translate('Value'), inputArr: additionalParams.config.condPPValue};
      } else {
        keyOptions = { id:"sfConditionKey", modelProperty: 'sfConditionKey', label: translate('Key'), inputArr: additionalParams.config.condFPKey};
        operatorOptions = { id:"sfConditionOperator", modelProperty: 'sfConditionOperator', label: translate('Operator'), inputArr: additionalParams.config.condOperator};
        valueOptions = { id:"sfConditionValue", modelProperty: 'sfConditionValue', label: translate('Value'), inputArr: additionalParams.config.condFPValue};
      }
      group.entries = group.entries.concat(selectEntryFactory(element, keyOptions, translate));
      group.entries = group.entries.concat(selectEntryFactory(element, operatorOptions, translate));
      group.entries = group.entries.concat(selectEntryFactory(element, valueOptions, translate));
    }
  }
};
