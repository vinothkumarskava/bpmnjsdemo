'use strict';

var actionEntryFactory = require('bpmn-js-properties-panel/lib/provider/bpmn/parts/implementation/Action'),
    selectEntryFactory = require('bpmn-js-properties-panel/lib/provider/bpmn/parts/implementation/Dropdown'),
    labelEntryFactory = require('bpmn-js-properties-panel/lib/provider/bpmn/parts/implementation/Label'),
    is = require('bpmn-js/lib/util/ModelUtil').is,
    domQuery = require('min-dom').query,
    domQueryAll = require('min-dom').queryAll,
    getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject,
    processPrice = require('./implementation/ProcessPriceEventDefinition'),
    dropdownProps = require('./DropdownProps');
var cmdHelper = require('../../../helper/CmdHelper');
const SUITABILITY_PROCESS_PRICE = "PROCESS_PRICE",
      SUITABILITY_FETCH_PRICE = "FETCH_PRICE",
      SUITABILITY_SHOPPING_FLOW = "SHOPPING_FLOW";

module.exports = function(group, element, bpmnFactory, canvas, translate, additionalParams) {
  var bo = getBusinessObject(element);

  function ensureNotNull(prop) {
    if (!prop) {
      throw new Error(prop + ' must be set.');
    }
    return prop;
  }

  function customGet(element) {
    var bo = getBusinessObject(element),
        res = {},
        prop = ensureNotNull('fpConditionKey');
    res[prop] = bo.get(prop);
    var selectedCondition = domQueryAll("div[data-entry^='fpConditionValue_']:not([data-entry=fpConditionValue_"+ res['fpConditionKey'] +"])");
    for (var i = 0; selectedCondition && i < selectedCondition.length; i++) {
      selectedCondition[i].classList.remove('bpp-hidden');
    }
    return res;
  };

  function customSet(element, values) {
    var res = {},
        prop = ensureNotNull('fpConditionKey');
    if (values[prop] !== '') {
      res[prop] = values[prop];
    } else {
      res[prop] = undefined;
    }
    var selectedCondition = domQueryAll("div[data-entry^='fpConditionValue_']:not([data-entry=fpConditionValue_"+ res['fpConditionKey'] +"])");
    for (var i = 0; selectedCondition && i < selectedCondition.length; i++) {
      selectedCondition[i].classList.add('bpp-hidden');
    }
    return cmdHelper.updateProperties(element, res);
  };

  function canShowEl(key){
    var bo = getBusinessObject(element),
        res = {},
        prop = ensureNotNull('fpConditionKey');
    res[prop] = bo.get(prop);
    var selectedCondition = domQuery("select[name='fpConditionKey']");
    if(selectedCondition) {
      return selectedCondition && selectedCondition[selectedCondition.selectedIndex].value == key;      
    } else if(res[prop] == key) {
      return true;
    }
    return false;
  }

  if (is(element, 'bpmn:Task') && bo.customElementName == SUITABILITY_FETCH_PRICE) {
    var options = { modelProperty: 'pricelist', label: translate('Price List ID')};
    group.entries = group.entries.concat(actionEntryFactory(element, options, translate));
  }

  if (is(element, 'bpmn:Task') && bo.customElementName == SUITABILITY_PROCESS_PRICE) {
    var options = { id:"ppAdjustment", label: translate('Adjustments')};
    group.entries = group.entries.concat(labelEntryFactory(element, options, translate));

    var options = { id:"ppAdjustment_operation", modelProperty: 'adjustmentOperation', label: translate('Operation'), inputArr: additionalParams.config.PPAdjustmentOperation};
    group.entries = group.entries.concat(selectEntryFactory(element, options, translate));

    var options = { id:"ppAdjustment_value", modelProperty: 'value', label: translate('Value (Percentage)') };
    group.entries = group.entries.concat(actionEntryFactory(element, options, translate));

    var options = { id:"ppRoundoff", label: translate('Round-off')};
    group.entries = group.entries.concat(labelEntryFactory(element, options, translate));

    var options = { id:"ppRoundoff_operation", modelProperty: 'roundoffOperation', label: translate('Operation'), inputArr: additionalParams.config.PPRoundoffOperation};
    group.entries = group.entries.concat(selectEntryFactory(element, options, translate));

    var options = { id:"ppRoundoff_type", modelProperty: 'type', label: translate('Type'), inputArr: additionalParams.config.PPRoundoffType};
    group.entries = group.entries.concat(selectEntryFactory(element, options, translate));
  }

  if (is(element, 'bpmn:SequenceFlow')) {
    function getTargetRef(){
      if(bo.targetRef && bo.targetRef.customElementName) {
        return bo.targetRef.customElementName;
      }
      return null;
    }

    function getSourceRef(){
      if(bo.sourceRef && bo.sourceRef.$type == "bpmn:ExclusiveGateway") {
        return bo.sourceRef;
      }
      return null;
    }

    let sourceRef = getSourceRef(),
        targetRef = getTargetRef();
    if(sourceRef && targetRef) {
      var keyOptions = {},
          operatorOptions = {},
          valueOptions = {};
      if(targetRef == SUITABILITY_PROCESS_PRICE || 
          (sourceRef.incoming && sourceRef.incoming[0].sourceRef.customElementName && 
            sourceRef.incoming[0].sourceRef.customElementName == SUITABILITY_FETCH_PRICE) ) {
        keyOptions = { id:"ppConditionKey", modelProperty: 'ppConditionKey', label: translate('Key'), inputArr: additionalParams.config.condPPKey};
        operatorOptions = { id:"ppConditionOperator", modelProperty: 'ppConditionOperator', label: translate('Operator'), inputArr: additionalParams.config.condOperator};
        valueOptions = { id:"ppConditionValue", modelProperty: 'ppConditionValue', label: translate('Value'), inputArr: additionalParams.config.condPPValue};
        group.entries = group.entries.concat(selectEntryFactory(element, keyOptions, translate));
        group.entries = group.entries.concat(selectEntryFactory(element, operatorOptions, translate));
        group.entries = group.entries.concat(selectEntryFactory(element, valueOptions, translate));
      } else {
        keyOptions = { id:"fpConditionKey'", modelProperty: 'fpConditionKey', label: translate('Key'), inputArr: additionalParams.config.condFPKey, get: customGet, set : customSet};
        operatorOptions = { id:"fpConditionOperator", modelProperty: 'fpConditionOperator', label: translate('Operator'), inputArr: additionalParams.config.condOperator};
        group.entries = group.entries.concat(selectEntryFactory(element, keyOptions, translate));
        group.entries = group.entries.concat(selectEntryFactory(element, operatorOptions, translate));
        additionalParams.config.condFPKey.forEach(conditionKey => {
          if(conditionKey.name && canShowEl(conditionKey.value)){
            if(!additionalParams.config.condFPValuesArr[conditionKey.value].length) {
              var options = { modelProperty: 'fpConditionValue_' + conditionKey.value, label: translate('Value')};
              group.entries = group.entries.concat(actionEntryFactory(element, options, translate));
            } else {
              valueOptions = { id:"fpConditionValue_"+conditionKey.value, modelProperty: 'fpConditionValue_' + conditionKey.value, label: translate('Value'), inputArr: additionalParams.config.condFPValuesArr[conditionKey.value]};
              group.entries = group.entries.concat(selectEntryFactory(element, valueOptions, translate));  
            }
          }
        });
      }
    }
  }
};
