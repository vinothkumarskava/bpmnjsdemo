'use strict';

var actionEntryFactory = require('bpmn-js-properties-panel/lib/provider/bpmn/parts/implementation/Action'),
    selectEntryFactory = require('bpmn-js-properties-panel/lib/provider/bpmn/parts/implementation/Dropdown'),
    labelEntryFactory = require('bpmn-js-properties-panel/lib/provider/bpmn/parts/implementation/Label'),
    checkboxEntryFactory = require('bpmn-js-properties-panel/lib/provider/bpmn/parts/implementation/CheckBoxEventDefinition'),
    is = require('bpmn-js/lib/util/ModelUtil').is,
    domQuery = require('min-dom').query,
    domQueryAll = require('min-dom').queryAll,
    getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject;
var cmdHelper = require('../../../helper/CmdHelper');
const SUITABILITY_PROCESS_PRICE = "PROCESS_PRICE";

module.exports = function(group, element, bpmnFactory, canvas, translate, additionalParams) {
  var bo = getBusinessObject(element);

  function ensureNotNull(prop) {
    if (!prop) {
      throw new Error(prop + ' must be set.');
    }

    return prop;
  }

  function customGet(element, modelProperty) {
    var bo = getBusinessObject(element),
      res = {},
      prop = ensureNotNull(modelProperty);
    res[prop] = bo.get(prop);

    return res;
  };

  function customSet(element, values, modelProperty) {
    var res = {},
      prop = ensureNotNull(modelProperty);
    if (values[prop] !== '') {
      res[prop] = values[prop];
    } else {
      res[prop] = undefined;
    }
    return res;
  };

  function getAdjustmentsProps(element) {
    var modelProperty = "ppAdjustmentOperation";
    var res = customGet(element, modelProperty);
    enableDisableInputs("ppAdjustmentValue", canDisable(res[modelProperty]));
    return res;
  };

  function setAdjustmentsProps(element, values) {
    var bo = getBusinessObject(element);
    var conditionEl = domQueryAll("select[name='ppAdjustmentOperation']");
    var valueModelProperty = "ppAdjustmentValue";
    if (conditionEl.length && !conditionEl[0].selectedIndex) {
      bo.$attrs[valueModelProperty] = "";
      enableDisableInputs(valueModelProperty, true); // isDisable = true
    } else {
      enableDisableInputs(valueModelProperty, false); // isDisable = false
    }
    var res = customSet(element, values, "ppAdjustmentOperation");
    return cmdHelper.updateProperties(element, res);
  };

  function getRoundoffProps(element) {
    var modelProperty = "ppRoundoffOperation";
    var res = customGet(element, modelProperty);
    enableDisableInputs("ppRoundoffValue", canDisable(res[modelProperty]));
    return res;
  };

  function setRoundoffProps(element, values) {
    var bo = getBusinessObject(element);
    var conditionEl = domQueryAll("select[name='ppRoundoffOperation']");
    var valueModelProperty = "ppRoundoffValue";
    if (conditionEl.length && !conditionEl[0].selectedIndex) {
      bo.$attrs[valueModelProperty] = "";
      enableDisableInputs(valueModelProperty, true); // isDisable = true
    } else {
      enableDisableInputs(valueModelProperty, false); // isDisable = false
    }
    var res = customSet(element, values, "ppRoundoffOperation");
    return cmdHelper.updateProperties(element, res);
  };

  function enableDisableInputs(queryElName, isDisable) {
    var valueEl = domQueryAll("div[name='" + queryElName + "']")[0];
    if (valueEl) {
      valueEl.setAttribute("contenteditable", "" + !isDisable);
    }
  }

  function canDisable(condition) {
    /* var queryElName = element.modelProperty == "ppAdjustmentValue" ? 'ppAdjustmentOperation' : 'ppRoundoffOperation';
    var selectedCondition = domQueryAll("select[name='" + queryElName + "']");
    if (selectedCondition && selectedCondition.length) {
      return selectedCondition[0].selectedIndex == 0;
    }
    return true; */
    if (condition) {
      return (condition == "No adjustments" || condition == "No rounding off");
    } else {
      return false;
    }
  }

  if (is(element, 'bpmn:Task') && bo.customElementName == SUITABILITY_PROCESS_PRICE) {
    var options = { id:"ppAdjustment", label: translate('Adjustments')};
    group.entries = group.entries.concat(labelEntryFactory(element, options, translate));

    options = { id: "ppAdjustment_operation", modelProperty: 'ppAdjustmentOperation', label: translate('Operation'), inputArr: additionalParams.config.PPAdjustmentOperation, get: getAdjustmentsProps, set: setAdjustmentsProps};
    group.entries = group.entries.concat(selectEntryFactory(element, options, translate));

    options = { id: "ppAdjustment_value", modelProperty: 'ppAdjustmentValue', label: translate('Value (Percentage)')};
    group.entries = group.entries.concat(actionEntryFactory(element, options, translate));

    options = { id:"ppRoundoff", label: translate('Round-off')};
    group.entries = group.entries.concat(labelEntryFactory(element, options, translate));

    options = { id: "ppRoundoff_operation", modelProperty: 'ppRoundoffOperation', label: translate('Operation'), inputArr: additionalParams.config.PPRoundoffOperation, get: getRoundoffProps, set: setRoundoffProps};
    group.entries = group.entries.concat(selectEntryFactory(element, options, translate));

    // options = { id:"ppRoundoff_type", modelProperty: 'type', label: translate('Type'), inputArr: additionalParams.config.PPRoundoffType};
    // group.entries = group.entries.concat(selectEntryFactory(element, options, translate));

    options = { id: "ppRoundoff_value", modelProperty: 'ppRoundoffValue', label: translate('Type'), description: "Enter the rounding pattern here. Example: *.00, *.49, *.99, *.29"};
    group.entries = group.entries.concat(actionEntryFactory(element, options, translate));
  }
};
