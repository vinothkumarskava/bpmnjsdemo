'use strict';


var inherits = require('inherits');
var forEach = require('lodash/forEach');
var PropertiesActivator = require('../../PropertiesActivator');
var is = require('bpmn-js/lib/util/ModelUtil').is,
    getBusinessObject = require('bpmn-js/lib/util/ModelUtil').getBusinessObject,
    cmdHelper = require('../../helper/CmdHelper');
var idProps = require('./parts/IdProps'),
    nameProps = require('./parts/NameProps'),
    taskProps = require('./parts/TaskProps');

const SUITABILITY_PROCESS_PRICE = "PROCESS_PRICE",
    SUITABILITY_FETCH_PRICE = "FETCH_PRICE";

const FETCH_PRICE_LABEL = "Fetch Price",
    PROCESS_PRICE_LABEL = "Process Price",
    GENERAL_ID = "general",
    GENERAL_LABEL = "General";

function createGeneralTabGroups(
    element, canvas, bpmnFactory,
    elementRegistry, translate, elementConfigurations) {

  var tempArr = [{"name": "", "value": ""}], tempValues = {};
  elementConfigurations[0].input_fields.forEach(resp => {
    var valsTempArr = [], tempJson = {};
    if(resp.options){
      resp.options.forEach(vals => {
        valsTempArr.push({"name": vals, "value": vals});      
      });
    }
    tempValues[resp.id] = valsTempArr;
    tempArr.push({"name": resp.name, "value": resp.id});
  });
  elementConfigurations.condFPKey = tempArr;
  elementConfigurations.condFPValuesArr = tempValues;  

  var tempArrPrice = [{"name": "", "value": ""}];
  forEach(elementConfigurations[1].priceLists, function(option) {
    tempArrPrice.push({"name": option.name, "value": option.name});
  });
  elementConfigurations.FPPriceList = tempArrPrice;

  // Appending the hard coded values to the original config
  elementConfigurations.PPAdjustmentOperation = [{"name":"No Adjustments","value":"No Adjustments"},{"name":"Markup","value":"Markup"},{"name":"Markdown","value":"Markdown"}];
  elementConfigurations.PPRoundoffOperation = [{"name":"No rounding off","value":"No rounding off"},{"name":"RoundUp","value":"RoundUp"},{"name":"RoundDown","value":"RoundDown"}];
  elementConfigurations.PPRoundoffType = [{"name":".00","value":".00"},{"name":".49","value":".49"},{"name":".99","value":".99"}];
  elementConfigurations.condPPKey = [{"name":"Price","value":"Price"}];
  elementConfigurations.condPPValue = [{"name":"Available","value":"Available"},{"name":"Not Available","value":"Not Available"}];
  elementConfigurations.condOperator = [{"name":"","value":""},{"name":"Equals","value":"Equals"},{"name":"Not Equals","value":"Not Equals"}];
  
  var options = {
    customAlert : customAlert,
    config : elementConfigurations
  };

  var group = {
    id: GENERAL_ID,
    label: translate(""),
    entries: []
  };

  var bo = getBusinessObject(element);
  if (is(element, 'bpmn:Task') && bo.customElementName == SUITABILITY_FETCH_PRICE) {
    taskProps(group, element, bpmnFactory, canvas, translate, options);
  } else if (is(element, 'bpmn:Task') && bo.customElementName == SUITABILITY_PROCESS_PRICE) {
    taskProps(group, element, bpmnFactory, canvas, translate, options);
  } else if (is(element, 'bpmn:SequenceFlow')) {
    taskProps(group, element, bpmnFactory, canvas, translate, options);
  } else {
    idProps(group, element, translate);
    nameProps(group, element, bpmnFactory, canvas, translate);
  }

  return [
    group
  ];
}

function customAlert(el){
  console.log("el: " + 1);
}

function BpmnPropertiesProvider(
    eventBus, canvas, bpmnFactory, elementRegistry, translate) {

  PropertiesActivator.call(this, eventBus);

  var config = this.getElementsConfigurations();
  console.log(config);

  this.getTabs = function(element) {
    var generalTab = {
      id: GENERAL_ID,
      label: translate(GENERAL_LABEL),
      groups: createGeneralTabGroups(
        element, canvas, bpmnFactory, elementRegistry, translate, config)
    };

    var bo = getBusinessObject(element);
    if (is(element, 'bpmn:Task') && bo.customElementName == SUITABILITY_FETCH_PRICE) {
      generalTab.label = translate(FETCH_PRICE_LABEL);
    } else if (is(element, 'bpmn:Task') && bo.customElementName == SUITABILITY_PROCESS_PRICE) {
      generalTab.label = translate(PROCESS_PRICE_LABEL);
    } else if (is(element, 'bpmn:SequenceFlow')) {
      generalTab.label = translate("Condition");
    }

    return [
      generalTab
    ];
  };
}

BpmnPropertiesProvider.$inject = [
  'eventBus',
  'canvas',
  'bpmnFactory',
  'elementRegistry',
  'translate'
];

inherits(BpmnPropertiesProvider, PropertiesActivator);

module.exports = BpmnPropertiesProvider;


BpmnPropertiesProvider.prototype.getElementsConfigurations = function() {
  return null;
};
